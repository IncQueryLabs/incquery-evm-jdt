package com.incquerylabs.evm.jdt.common.queries

import "http://www.eclipse.org/uml2/5.0.0/UML"

pattern umlClass(umlClass: Class) {
	Class(umlClass);
	// only accept "real" classes (in UML, it has lots of counterintuitive subclasses)
	neg find umlAssociationClass(umlClass);
	neg find behavior(umlClass);
	neg find umlComponent(umlClass);
	neg find node(umlClass);
	neg find stereotype(umlClass);
	neg find templateParameterClass(umlClass);
	neg find templateBindingClass(umlClass);
}

private pattern umlAssociationClass(associationClass) {
	AssociationClass(associationClass);
}

private pattern behavior(it) {
	Behavior(it);
}

pattern umlComponent(component: Component) {
	Component(component);
}

private pattern node(it) {
	Node(it);
}

private pattern stereotype(it) {
	Stereotype(it);
}

private pattern templateParameterClass(umlClass: Class){
  TemplateSignature.ownedParameter(_, param);
  ClassifierTemplateParameter.parameteredElement(param, umlClass);
}

private pattern templateBindingClass(umlClass: Class){
  TemplateBinding.parameterSubstitution(_, param);
  TemplateParameterSubstitution.actual(param, umlClass);
}

pattern umlClassInModel(model: Model, umlClass: Class) {
	Model.packagedElement(model, umlClass);
	find umlClass(umlClass);
}

pattern umlClassInPackage(umlPackage: Package, umlClass: Class) {
	Package.packagedElement(umlPackage, umlClass);
	find umlClass(umlClass);
	find umlPackage(umlPackage);
}

pattern umlPackage(umlPackage) {
	Package(umlPackage);
	neg find model(umlPackage);
	neg find profile(umlPackage);
}

pattern leafPackage(umlPackage) {
	find umlPackage(umlPackage);
	neg find packageInPackage(umlPackage, _);
}

pattern packageInPackage(parent, child) {
	find umlPackage(parent);
	find umlPackage(child);
	Package.packagedElement(parent, child);
} or {
	find model(parent);
	find umlPackage(child);
	Package.packagedElement(parent, child);
}

private pattern model(model) {
	Model(model);
}

private pattern profile(it) {
	Profile(it);
}

pattern umlAssociation(association: Association, srcEnd : Property, trgEnd : Property) {
	Association.memberEnd(association, srcEnd);
	Property.type(srcEnd, _);
	Association.navigableOwnedEnd(association, trgEnd);
	Property.type(trgEnd, _);
	srcEnd != trgEnd;
}

pattern associationOfClass(srcType : Type, srcQn, association: Association, srcEnd : Property, trgEnd : Property) {
	Association.memberEnd(association, srcEnd);
	Property.type(srcEnd, srcType);
	Association.navigableOwnedEnd(association, trgEnd);
	srcEnd != trgEnd;
	Type.qualifiedName(srcType, srcQn);
}